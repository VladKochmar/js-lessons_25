// –î–∞–Ω–æ –∫–ª–∞—Å PhoneNumber. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ string,
// –ø—Ä–∏ —è–∫–æ–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–º–µ—Ä–∞ –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä (050‚Ä¶.  ü°™ MTC, 096‚Ä¶ ü°™ Kyivstar, ‚Ä¶.)

class PhoneNumber {
   constructor(phoneNumber) {
      this.phoneNumber = phoneNumber
   }

   checkOperator() {
      let operator

      if (/380(50|66|95|99)\d{7}/.test(this.phoneNumber)) operator = 'Vodafone –£–∫—Ä–∞—ó–Ω–∞'
      else if (/380(63|73|93)\d{7}/.test(this.phoneNumber)) operator = 'Lifecell'
      else if (/380(39|67|68|96|97|98)\d{7}/.test(this.phoneNumber)) operator = 'Kyivstar'

      return operator
   }

   render(targetContainer) {
      document.querySelector(targetContainer).append(this)
   }

   [Symbol.toPrimitive](hint) {
      let result

      switch (hint) {
         case 'number':
            result = this.phoneNumber
            break
         case 'string':
            result = `${this.checkOperator()}: +${this.phoneNumber} `
            break
         default:
            result = null
            break
      }

      return result
   }
}

new PhoneNumber(380730509704).render('.block__container')
new PhoneNumber(380504732826).render('.block__container')
new PhoneNumber(380676343427).render('.block__container')
new PhoneNumber(380933427742).render('.block__container')
